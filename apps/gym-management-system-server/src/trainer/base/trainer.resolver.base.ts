/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Trainer } from "./Trainer";
import { TrainerCountArgs } from "./TrainerCountArgs";
import { TrainerFindManyArgs } from "./TrainerFindManyArgs";
import { TrainerFindUniqueArgs } from "./TrainerFindUniqueArgs";
import { CreateTrainerArgs } from "./CreateTrainerArgs";
import { UpdateTrainerArgs } from "./UpdateTrainerArgs";
import { DeleteTrainerArgs } from "./DeleteTrainerArgs";
import { ClassModelFindManyArgs } from "../../classModel/base/ClassModelFindManyArgs";
import { ClassModel } from "../../classModel/base/ClassModel";
import { TrainerService } from "../trainer.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Trainer)
export class TrainerResolverBase {
  constructor(
    protected readonly service: TrainerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Trainer",
    action: "read",
    possession: "any",
  })
  async _trainersMeta(
    @graphql.Args() args: TrainerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Trainer])
  @nestAccessControl.UseRoles({
    resource: "Trainer",
    action: "read",
    possession: "any",
  })
  async trainers(
    @graphql.Args() args: TrainerFindManyArgs
  ): Promise<Trainer[]> {
    return this.service.trainers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Trainer, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Trainer",
    action: "read",
    possession: "own",
  })
  async trainer(
    @graphql.Args() args: TrainerFindUniqueArgs
  ): Promise<Trainer | null> {
    const result = await this.service.trainer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Trainer)
  @nestAccessControl.UseRoles({
    resource: "Trainer",
    action: "create",
    possession: "any",
  })
  async createTrainer(
    @graphql.Args() args: CreateTrainerArgs
  ): Promise<Trainer> {
    return await this.service.createTrainer({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Trainer)
  @nestAccessControl.UseRoles({
    resource: "Trainer",
    action: "update",
    possession: "any",
  })
  async updateTrainer(
    @graphql.Args() args: UpdateTrainerArgs
  ): Promise<Trainer | null> {
    try {
      return await this.service.updateTrainer({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Trainer)
  @nestAccessControl.UseRoles({
    resource: "Trainer",
    action: "delete",
    possession: "any",
  })
  async deleteTrainer(
    @graphql.Args() args: DeleteTrainerArgs
  ): Promise<Trainer | null> {
    try {
      return await this.service.deleteTrainer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ClassModel], { name: "classes" })
  @nestAccessControl.UseRoles({
    resource: "ClassModel",
    action: "read",
    possession: "any",
  })
  async findClasses(
    @graphql.Parent() parent: Trainer,
    @graphql.Args() args: ClassModelFindManyArgs
  ): Promise<ClassModel[]> {
    const results = await this.service.findClasses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
