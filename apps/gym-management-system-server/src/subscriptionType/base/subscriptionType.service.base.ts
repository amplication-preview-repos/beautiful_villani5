/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  SubscriptionType as PrismaSubscriptionType,
} from "@prisma/client";

export class SubscriptionTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SubscriptionTypeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.subscriptionType.count(args);
  }

  async subscriptionTypes(
    args: Prisma.SubscriptionTypeFindManyArgs
  ): Promise<PrismaSubscriptionType[]> {
    return this.prisma.subscriptionType.findMany(args);
  }
  async subscriptionType(
    args: Prisma.SubscriptionTypeFindUniqueArgs
  ): Promise<PrismaSubscriptionType | null> {
    return this.prisma.subscriptionType.findUnique(args);
  }
  async createSubscriptionType(
    args: Prisma.SubscriptionTypeCreateArgs
  ): Promise<PrismaSubscriptionType> {
    return this.prisma.subscriptionType.create(args);
  }
  async updateSubscriptionType(
    args: Prisma.SubscriptionTypeUpdateArgs
  ): Promise<PrismaSubscriptionType> {
    return this.prisma.subscriptionType.update(args);
  }
  async deleteSubscriptionType(
    args: Prisma.SubscriptionTypeDeleteArgs
  ): Promise<PrismaSubscriptionType> {
    return this.prisma.subscriptionType.delete(args);
  }
}
