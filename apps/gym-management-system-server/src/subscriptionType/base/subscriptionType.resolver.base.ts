/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SubscriptionType } from "./SubscriptionType";
import { SubscriptionTypeCountArgs } from "./SubscriptionTypeCountArgs";
import { SubscriptionTypeFindManyArgs } from "./SubscriptionTypeFindManyArgs";
import { SubscriptionTypeFindUniqueArgs } from "./SubscriptionTypeFindUniqueArgs";
import { CreateSubscriptionTypeArgs } from "./CreateSubscriptionTypeArgs";
import { UpdateSubscriptionTypeArgs } from "./UpdateSubscriptionTypeArgs";
import { DeleteSubscriptionTypeArgs } from "./DeleteSubscriptionTypeArgs";
import { SubscriptionTypeService } from "../subscriptionType.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SubscriptionType)
export class SubscriptionTypeResolverBase {
  constructor(
    protected readonly service: SubscriptionTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SubscriptionType",
    action: "read",
    possession: "any",
  })
  async _subscriptionTypesMeta(
    @graphql.Args() args: SubscriptionTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SubscriptionType])
  @nestAccessControl.UseRoles({
    resource: "SubscriptionType",
    action: "read",
    possession: "any",
  })
  async subscriptionTypes(
    @graphql.Args() args: SubscriptionTypeFindManyArgs
  ): Promise<SubscriptionType[]> {
    return this.service.subscriptionTypes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SubscriptionType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SubscriptionType",
    action: "read",
    possession: "own",
  })
  async subscriptionType(
    @graphql.Args() args: SubscriptionTypeFindUniqueArgs
  ): Promise<SubscriptionType | null> {
    const result = await this.service.subscriptionType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SubscriptionType)
  @nestAccessControl.UseRoles({
    resource: "SubscriptionType",
    action: "create",
    possession: "any",
  })
  async createSubscriptionType(
    @graphql.Args() args: CreateSubscriptionTypeArgs
  ): Promise<SubscriptionType> {
    return await this.service.createSubscriptionType({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SubscriptionType)
  @nestAccessControl.UseRoles({
    resource: "SubscriptionType",
    action: "update",
    possession: "any",
  })
  async updateSubscriptionType(
    @graphql.Args() args: UpdateSubscriptionTypeArgs
  ): Promise<SubscriptionType | null> {
    try {
      return await this.service.updateSubscriptionType({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SubscriptionType)
  @nestAccessControl.UseRoles({
    resource: "SubscriptionType",
    action: "delete",
    possession: "any",
  })
  async deleteSubscriptionType(
    @graphql.Args() args: DeleteSubscriptionTypeArgs
  ): Promise<SubscriptionType | null> {
    try {
      return await this.service.deleteSubscriptionType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
